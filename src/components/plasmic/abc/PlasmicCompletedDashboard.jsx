// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zC4fkbXrqgM7fa4uUQ6gc
// Component: ZteDXpjmX1GcU
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_abc.module.css"; // plasmic-import: 3zC4fkbXrqgM7fa4uUQ6gc/projectcss
import sty from "./PlasmicCompletedDashboard.module.css"; // plasmic-import: ZteDXpjmX1GcU/css
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: LKpswmIWEaDyH/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: tGC1V-5eAWH4v/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: Auft1bfzXWFpj/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: qVTEGUu7dCBKS/icon

export const PlasmicCompletedDashboard__VariantProps = new Array();

export const PlasmicCompletedDashboard__ArgProps = new Array();

function PlasmicCompletedDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__w5Udh)}
      >
        <Icon16Icon
          className={classNames(projectcss.all, sty.svg__hzSkU)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3Swna
          )}
        >
          {"Dashboard"}
        </div>

        <Icon17Icon
          className={classNames(projectcss.all, sty.svg__yNufp)}
          role={"img"}
        />

        <Icon15Icon
          className={classNames(projectcss.all, sty.svg__fvbbb)}
          role={"img"}
        />
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__scYjc)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__l4XeK)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mi2Pj
            )}
          >
            {"Dashboard"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oOtyf
            )}
          >
            {"Reports"}
          </div>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__jq2G)}>
          <Icon18Icon
            className={classNames(projectcss.all, sty.svg__i9Tv)}
            role={"img"}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCompletedDashboard__ArgProps,
          internalVariantPropNames: PlasmicCompletedDashboard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCompletedDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedDashboard";
  } else {
    func.displayName = `PlasmicCompletedDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedDashboard = Object.assign(
  // Top-level PlasmicCompletedDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCompletedDashboard
    internalVariantProps: PlasmicCompletedDashboard__VariantProps,
    internalArgProps: PlasmicCompletedDashboard__ArgProps
  }
);

export default PlasmicCompletedDashboard;
/* prettier-ignore-end */
