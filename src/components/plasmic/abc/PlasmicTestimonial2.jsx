// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zC4fkbXrqgM7fa4uUQ6gc
// Component: XENwy7AkusalZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_abc.module.css"; // plasmic-import: 3zC4fkbXrqgM7fa4uUQ6gc/projectcss
import sty from "./PlasmicTestimonial2.module.css"; // plasmic-import: XENwy7AkusalZ/css
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: GueOIOwUk-ilA/icon
import image450FYlVlWz8LZwQ from "./images/image45.png"; // plasmic-import: 0FYlVlWz8LZwQ/picture

export const PlasmicTestimonial2__VariantProps = new Array();

export const PlasmicTestimonial2__ArgProps = new Array();

function PlasmicTestimonial2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"100px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100px"}
        src={{
          src: image450FYlVlWz8LZwQ,
          fullWidth: 205,
          fullHeight: 208,
          aspectRatio: undefined
        }}
      />

      <Icon28Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__ezjFu)}>
        <div className={classNames(projectcss.all, sty.freeBox__ckPrv)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fEMb
            )}
          >
            {"Truly revolutionary. An incredible leap forward."}
          </div>
        </div>
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__kw
        )}
      >
        {"Jane D.\nPied Piper"}
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___6USIf
        )}
      >
        {"Read case study -->"}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestimonial2__ArgProps,
          internalVariantPropNames: PlasmicTestimonial2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTestimonial2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonial2";
  } else {
    func.displayName = `PlasmicTestimonial2.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonial2 = Object.assign(
  // Top-level PlasmicTestimonial2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicTestimonial2
    internalVariantProps: PlasmicTestimonial2__VariantProps,
    internalArgProps: PlasmicTestimonial2__ArgProps
  }
);

export default PlasmicTestimonial2;
/* prettier-ignore-end */
