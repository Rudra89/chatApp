// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zC4fkbXrqgM7fa4uUQ6gc
// Component: s6OfDSndSlLq
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Footer from "../../Footer"; // plasmic-import: DX5kHRLOuC5m/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_abc.module.css"; // plasmic-import: 3zC4fkbXrqgM7fa4uUQ6gc/projectcss
import sty from "./PlasmicLevel.module.css"; // plasmic-import: s6OfDSndSlLq/css

export const PlasmicLevel__VariantProps = new Array(
  "variations",
  "showMaxLevels",
  "rightSide",
  "basics"
);

export const PlasmicLevel__ArgProps = new Array(
  "children",
  "number",
  "title",
  "right"
);

function PlasmicLevel__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variations",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.variations
      },
      {
        path: "showMaxLevels",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.showMaxLevels
      },
      {
        path: "rightSide",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.rightSide
      },
      {
        path: "basics",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.basics
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, $props, $ctx);
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootvariations_footerOnly]: hasVariant(
            $state,
            "variations",
            "footerOnly"
          ),

          [sty.rootvariations_noFooter]: hasVariant(
            $state,
            "variations",
            "noFooter"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__sbEek, {
          [sty.freeBoxvariations_noFooter__sbEek0LtWv]: hasVariant(
            $state,
            "variations",
            "noFooter"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oOslo, {
            [sty.freeBoxbasics__oOsloMy3W]: hasVariant(
              $state,
              "basics",
              "basics"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dwu8L, {
              [sty.freeBoxrightSide__dwu8LoCErc]: hasVariant(
                $state,
                "rightSide",
                "rightSide"
              ),

              [sty.freeBoxshowMaxLevels__dwu8L5F2EW]: hasVariant(
                $state,
                "showMaxLevels",
                "showMaxLevels"
              ),

              [sty.freeBoxvariations_noFooter__dwu8L0LtWv]: hasVariant(
                $state,
                "variations",
                "noFooter"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__d4PMb, {
                [sty.freeBoxrightSide__d4PMboCErc]: hasVariant(
                  $state,
                  "rightSide",
                  "rightSide"
                ),

                [sty.freeBoxshowMaxLevels__d4PMb5F2EW]: hasVariant(
                  $state,
                  "showMaxLevels",
                  "showMaxLevels"
                )
              })}
            >
              {(hasVariant($state, "basics", "basics") ? false : true) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ydw1N,
                    {
                      [sty.textbasics__ydw1NMy3W]: hasVariant(
                        $state,
                        "basics",
                        "basics"
                      ),

                      [sty.textshowMaxLevels__ydw1N5F2EW]: hasVariant(
                        $state,
                        "showMaxLevels",
                        "showMaxLevels"
                      )
                    }
                  )}
                >
                  {"Advanced "}
                </div>
              ) : null}
              {(hasVariant($state, "variations", "footerOnly") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xhzMr
                        )}
                      >
                        {"Level 1"}
                      </div>
                    ),

                    value: args.number,
                    className: classNames(sty.slotTargetNumber, {
                      [sty.slotTargetNumbervariations_footerOnly]: hasVariant(
                        $state,
                        "variations",
                        "footerOnly"
                      )
                    })
                  })
                : null}
              {(
                hasVariant($state, "showMaxLevels", "showMaxLevels")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hLzQ,
                    {
                      [sty.textshowMaxLevels__hLzQ5F2EW]: hasVariant(
                        $state,
                        "showMaxLevels",
                        "showMaxLevels"
                      )
                    }
                  )}
                >
                  {" of 7"}
                </div>
              ) : null}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rFYz)}
            >
              {(hasVariant($state, "variations", "footerOnly") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bpbG5
                        )}
                      >
                        {"Draw a box."}
                      </div>
                    ),

                    value: args.title,
                    className: classNames(sty.slotTargetTitle, {
                      [sty.slotTargetTitlevariations_footerOnly]: hasVariant(
                        $state,
                        "variations",
                        "footerOnly"
                      )
                    })
                  })
                : null}
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uyLK
                    )}
                  >
                    {
                      "Press r to enter rectangle drawing mode. Drag to try drawing the given shape."
                    }
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__hBz7E)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sbgdn)}
                    />
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__otVj6
                    )}
                  >
                    {"Tip: hold shift while dragging to draw a perfect square."}
                  </div>
                </React.Fragment>
              ),

              value: args.children
            })}
          </p.Stack>

          {(hasVariant($state, "rightSide", "rightSide") ? true : false) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__bwWqz, {
                [sty.freeBoxrightSide__bwWqZoCErc]: hasVariant(
                  $state,
                  "rightSide",
                  "rightSide"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.right
              })}
            </div>
          ) : null}
        </p.Stack>

        {(hasVariant($state, "variations", "noFooter") ? false : true) ? (
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footervariations_noFooter]: hasVariant(
                $state,
                "variations",
                "noFooter"
              )
            })}
          />
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "footer"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLevel__ArgProps,
          internalVariantPropNames: PlasmicLevel__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLevel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLevel";
  } else {
    func.displayName = `PlasmicLevel.${nodeName}`;
  }
  return func;
}

export const PlasmicLevel = Object.assign(
  // Top-level PlasmicLevel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicLevel
    internalVariantProps: PlasmicLevel__VariantProps,
    internalArgProps: PlasmicLevel__ArgProps
  }
);

export default PlasmicLevel;
/* prettier-ignore-end */
